//
//  App.swift
//  App (Generated by SwiftyLaunch 2.0)
//  https://docs.swiftylaun.ch/module/app
//  https://docs.swiftylaun.ch/basics/how-to-work-with-swiftylaunch
//
//  Main entrance of your app.
//  Define your app-wide settings here, objects that are shared within the
//  app via EnvironmentObject, and attach app-wide view modifiers.
//

import SharedKit
import SwiftUI
import UIKit

@main
struct MainApp: App {

	// Allows us to tap into AppDelegate
	@UIApplicationDelegateAdaptor(AppDelegate.self) var delegate

	init() {

	}

	var body: some Scene {
		WindowGroup {
//			ContentView()
            HomeView()

				// For different types of requests: Camera Request, Location Request, Request to Review the App, etc. See `askUserFor.swift` in SharedKit for more information.
				.modifier(ShowRequestSheetWhenNeededModifier())

				// Will show the WhatsNewView sheet if the user opens the app for the first time with a specific app version (for updates)
//				.modifier(ShowFeatureSheetOnNewAppVersionModifier())

				// Will show the OnboardingView if the user opens the app for the first time
//				.modifier(ShowOnboardingViewOnFirstLaunchEverModifier())

		}
	}
}

class AppDelegate: NSObject, UIApplicationDelegate {

	/// This function is called by the UIApplicationDelegate when App has finished loading and is launched.
	///
	/// Learn more about the app lifecycle [here](https://manasaprema04.medium.com/application-life-cycle-in-ios-f7365d8c1636).
	func application(
		_ application: UIApplication,
		didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? = nil
	) -> Bool {

		return true
	}

	/// Set SceneDelegate as the delegate for the main window
	func application(
		_ application: UIApplication,
		configurationForConnecting connectingSceneSession: UISceneSession,
		options: UIScene.ConnectionOptions
	)
		-> UISceneConfiguration
	{
		let configuration = UISceneConfiguration(name: nil, sessionRole: connectingSceneSession.role)
		if connectingSceneSession.role == .windowApplication {
			configuration.delegateClass = SceneDelegate.self
		}
		return configuration
	}

}

// https://swiftylaun.ch/blog/swiftui-overlay-over-every-view
// https://docs.swiftylaun.ch/module/sharedkit/in-app-notifications
final class SceneDelegate: NSObject, ObservableObject, UIWindowSceneDelegate {

	var keyWindow: UIWindow?
	var secondaryWindow: UIWindow?

	func scene(
		_ scene: UIScene,
		willConnectTo session: UISceneSession,
		options connectionOptions: UIScene.ConnectionOptions
	) {
		if let windowScene = scene as? UIWindowScene {
			setupSecondaryOverlayWindow(in: windowScene)
		}
		// Change the AccentColor in App/Resources/Assets to style the app
		UIView.appearance(whenContainedInInstancesOf: [UIAlertController.self]).tintColor = UIColor.init(
			named: "AccentColor")
	}

	// Secondary, transparent window for overlays that go over all views.
	func setupSecondaryOverlayWindow(in scene: UIWindowScene) {
		let secondaryViewController = UIHostingController(
			rootView:
				EmptyView()
				.frame(maxWidth: .infinity, maxHeight: .infinity)

				// This modifier allows you to show in-app notifications with the `showInAppNotification` function
				.modifier(ShowInAppNotificationsWhenCalledModifier())

		)
		secondaryViewController.view.backgroundColor = .clear

		let secondaryWindow = PassThroughWindow(windowScene: scene)
		secondaryWindow.rootViewController = secondaryViewController
		secondaryWindow.isHidden = false
		self.secondaryWindow = secondaryWindow
	}
}

class PassThroughWindow: UIWindow {
	override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
		// Get view from superclass.
		guard let hitView = super.hitTest(point, with: event) else { return nil }
		// If the returned view is the `UIHostingController`'s view, ignore.
		return rootViewController?.view == hitView ? nil : hitView
	}
}
